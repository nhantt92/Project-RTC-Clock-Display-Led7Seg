                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TIM4_UPD_OVF_IRQHandler
                                     13 	.globl _delay
                                     14 	.globl _screen
                                     15 	.globl _displayInit
                                     16 	.globl _TIMER_InitTime
                                     17 	.globl _TIMER_Inc
                                     18 	.globl _TIMER_Init
                                     19 	.globl _TIM4_ClearITPendingBit
                                     20 	.globl _IWDG_Enable
                                     21 	.globl _IWDG_ReloadCounter
                                     22 	.globl _IWDG_SetReload
                                     23 	.globl _IWDG_SetPrescaler
                                     24 	.globl _IWDG_WriteAccessCmd
                                     25 	.globl _GPIO_Init
                                     26 	.globl _CLK_Config
                                     27 	.globl _tick
                                     28 	.globl _IWDG_Config
                                     29 	.globl _GPIO_setup
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DATA
      000000                         34 _tick::
      000000                         35 	.ds 6
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area INITIALIZED
                                     40 ;--------------------------------------------------------
                                     41 ; Stack segment in internal ram 
                                     42 ;--------------------------------------------------------
                                     43 	.area	SSEG
      000000                         44 __start__stack:
      000000                         45 	.ds	1
                                     46 
                                     47 ;--------------------------------------------------------
                                     48 ; absolute external ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area DABS (ABS)
                                     51 ;--------------------------------------------------------
                                     52 ; interrupt vector 
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
      000000                         55 __interrupt_vect:
      000000 82v00u00u00             56 	int s_GSINIT ;reset
      000004 82 00 00 00             57 	int 0x0000 ;trap
      000008 82 00 00 00             58 	int 0x0000 ;int0
      00000C 82 00 00 00             59 	int 0x0000 ;int1
      000010 82 00 00 00             60 	int 0x0000 ;int2
      000014 82 00 00 00             61 	int 0x0000 ;int3
      000018 82 00 00 00             62 	int 0x0000 ;int4
      00001C 82 00 00 00             63 	int 0x0000 ;int5
      000020 82 00 00 00             64 	int 0x0000 ;int6
      000024 82 00 00 00             65 	int 0x0000 ;int7
      000028 82 00 00 00             66 	int 0x0000 ;int8
      00002C 82 00 00 00             67 	int 0x0000 ;int9
      000030 82 00 00 00             68 	int 0x0000 ;int10
      000034 82 00 00 00             69 	int 0x0000 ;int11
      000038 82 00 00 00             70 	int 0x0000 ;int12
      00003C 82 00 00 00             71 	int 0x0000 ;int13
      000040 82 00 00 00             72 	int 0x0000 ;int14
      000044 82 00 00 00             73 	int 0x0000 ;int15
      000048 82 00 00 00             74 	int 0x0000 ;int16
      00004C 82 00 00 00             75 	int 0x0000 ;int17
      000050 82 00 00 00             76 	int 0x0000 ;int18
      000054 82 00 00 00             77 	int 0x0000 ;int19
      000058 82 00 00 00             78 	int 0x0000 ;int20
      00005C 82 00 00 00             79 	int 0x0000 ;int21
      000060 82 00 00 00             80 	int 0x0000 ;int22
      000064 82v00u00u0C             81 	int _TIM4_UPD_OVF_IRQHandler ;int23
      000068 82 00 00 00             82 	int 0x0000 ;int24
      00006C 82 00 00 00             83 	int 0x0000 ;int25
      000070 82 00 00 00             84 	int 0x0000 ;int26
      000074 82 00 00 00             85 	int 0x0000 ;int27
      000078 82 00 00 00             86 	int 0x0000 ;int28
      00007C 82 00 00 00             87 	int 0x0000 ;int29
                                     88 ;--------------------------------------------------------
                                     89 ; global & static initialisations
                                     90 ;--------------------------------------------------------
                                     91 	.area HOME
                                     92 	.area GSINIT
                                     93 	.area GSFINAL
                                     94 	.area GSINIT
      000000                         95 __sdcc_gs_init_startup:
      000000                         96 __sdcc_init_data:
                                     97 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   98 	ldw x, #l_DATA
      000003 27 07            [ 1]   99 	jreq	00002$
      000005                        100 00001$:
      000005 72 4FuFFuFF      [ 1]  101 	clr (s_DATA - 1, x)
      000009 5A               [ 2]  102 	decw x
      00000A 26 F9            [ 1]  103 	jrne	00001$
      00000C                        104 00002$:
      00000C AEr00r00         [ 2]  105 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  106 	jreq	00004$
      000011                        107 00003$:
      000011 D6uFFuFF         [ 1]  108 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  109 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  110 	decw	x
      000018 26 F7            [ 1]  111 	jrne	00003$
      00001A                        112 00004$:
                                    113 ; stm8_genXINIT() end
                                    114 	.area GSFINAL
      000000 CCr00r80         [ 2]  115 	jp	__sdcc_program_startup
                                    116 ;--------------------------------------------------------
                                    117 ; Home
                                    118 ;--------------------------------------------------------
                                    119 	.area HOME
                                    120 	.area HOME
      000080                        121 __sdcc_program_startup:
      000080 CCr00r32         [ 2]  122 	jp	_main
                                    123 ;	return from main will return to caller
                                    124 ;--------------------------------------------------------
                                    125 ; code
                                    126 ;--------------------------------------------------------
                                    127 	.area CODE
                                    128 ;	user/main.c: 28: void delay(uint16_t x)
                                    129 ;	-----------------------------------------
                                    130 ;	 function delay
                                    131 ;	-----------------------------------------
      000000                        132 _delay:
      000000 89               [ 2]  133 	pushw	x
                                    134 ;	user/main.c: 30: while(x--);
      000001 1E 05            [ 2]  135 	ldw	x, (0x05, sp)
      000003                        136 00101$:
      000003 1F 01            [ 2]  137 	ldw	(0x01, sp), x
      000005 5A               [ 2]  138 	decw	x
      000006 16 01            [ 2]  139 	ldw	y, (0x01, sp)
      000008 26 F9            [ 1]  140 	jrne	00101$
      00000A 85               [ 2]  141 	popw	x
      00000B 81               [ 4]  142 	ret
                                    143 ;	user/main.c: 33: INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
                                    144 ;	-----------------------------------------
                                    145 ;	 function TIM4_UPD_OVF_IRQHandler
                                    146 ;	-----------------------------------------
      00000C                        147 _TIM4_UPD_OVF_IRQHandler:
      00000C 62               [ 2]  148 	div	x, a
                                    149 ;	user/main.c: 35: TIM4_ClearITPendingBit(TIM4_IT_UPDATE);
      00000D 4B 01            [ 1]  150 	push	#0x01
      00000F CDr00r00         [ 4]  151 	call	_TIM4_ClearITPendingBit
      000012 84               [ 1]  152 	pop	a
                                    153 ;	user/main.c: 36: TIMER_Inc();
      000013 CDr00r00         [ 4]  154 	call	_TIMER_Inc
                                    155 ;	user/main.c: 37: IWDG_ReloadCounter();
      000016 CDr00r00         [ 4]  156 	call	_IWDG_ReloadCounter
      000019 80               [11]  157 	iret
                                    158 ;	user/main.c: 40: void IWDG_Config(void)
                                    159 ;	-----------------------------------------
                                    160 ;	 function IWDG_Config
                                    161 ;	-----------------------------------------
      00001A                        162 _IWDG_Config:
                                    163 ;	user/main.c: 44: IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable);
      00001A 4B 55            [ 1]  164 	push	#0x55
      00001C CDr00r00         [ 4]  165 	call	_IWDG_WriteAccessCmd
      00001F 84               [ 1]  166 	pop	a
                                    167 ;	user/main.c: 46: IWDG_SetPrescaler(IWDG_Prescaler_256);
      000020 4B 06            [ 1]  168 	push	#0x06
      000022 CDr00r00         [ 4]  169 	call	_IWDG_SetPrescaler
      000025 84               [ 1]  170 	pop	a
                                    171 ;	user/main.c: 50: IWDG_SetReload(250);
      000026 4B FA            [ 1]  172 	push	#0xfa
      000028 CDr00r00         [ 4]  173 	call	_IWDG_SetReload
      00002B 84               [ 1]  174 	pop	a
                                    175 ;	user/main.c: 52: IWDG_ReloadCounter();
      00002C CDr00r00         [ 4]  176 	call	_IWDG_ReloadCounter
                                    177 ;	user/main.c: 54: IWDG_Enable();
      00002F CCr00r00         [ 2]  178 	jp	_IWDG_Enable
                                    179 ;	user/main.c: 58: void main() 
                                    180 ;	-----------------------------------------
                                    181 ;	 function main
                                    182 ;	-----------------------------------------
      000032                        183 _main:
                                    184 ;	user/main.c: 60: CLK_Config();
      000032 CDr00r00         [ 4]  185 	call	_CLK_Config
                                    186 ;	user/main.c: 61: GPIO_setup(); 
      000035 CDr00r6A         [ 4]  187 	call	_GPIO_setup
                                    188 ;	user/main.c: 63: TIMER_Init();
      000038 CDr00r00         [ 4]  189 	call	_TIMER_Init
                                    190 ;	user/main.c: 64: displayInit(GPIOC, GPIOA, GPIO_PIN_6, GPIO_PIN_5, GPIO_PIN_7, GPIO_PIN_4, GPIO_PIN_3, GPIO_PIN_2, GPIO_PIN_1, GPIO_PIN_3);
      00003B 4B 08            [ 1]  191 	push	#0x08
      00003D 4B 02            [ 1]  192 	push	#0x02
      00003F 4B 04            [ 1]  193 	push	#0x04
      000041 4B 08            [ 1]  194 	push	#0x08
      000043 4B 10            [ 1]  195 	push	#0x10
      000045 4B 80            [ 1]  196 	push	#0x80
      000047 4B 20            [ 1]  197 	push	#0x20
      000049 4B 40            [ 1]  198 	push	#0x40
      00004B 4B 00            [ 1]  199 	push	#0x00
      00004D 4B 50            [ 1]  200 	push	#0x50
      00004F 4B 0A            [ 1]  201 	push	#0x0a
      000051 4B 50            [ 1]  202 	push	#0x50
      000053 CDr00r00         [ 4]  203 	call	_displayInit
      000056 5B 0C            [ 2]  204 	addw	sp, #12
                                    205 ;	user/main.c: 65: TIMER_InitTime(&tick);
      000058 AEr00r00         [ 2]  206 	ldw	x, #_tick+0
      00005B 89               [ 2]  207 	pushw	x
      00005C CDr00r00         [ 4]  208 	call	_TIMER_InitTime
      00005F 85               [ 2]  209 	popw	x
                                    210 ;	user/main.c: 66: IWDG_Config();
      000060 CDr00r1A         [ 4]  211 	call	_IWDG_Config
                                    212 ;	user/main.c: 67: enableInterrupts();
      000063 9A               [ 1]  213 	rim
                                    214 ;	user/main.c: 70: while(TRUE) 
      000064                        215 00102$:
                                    216 ;	user/main.c: 80: screen();
      000064 CDr00r00         [ 4]  217 	call	_screen
      000067 20 FB            [ 2]  218 	jra	00102$
      000069 81               [ 4]  219 	ret
                                    220 ;	user/main.c: 84: void GPIO_setup(void) 
                                    221 ;	-----------------------------------------
                                    222 ;	 function GPIO_setup
                                    223 ;	-----------------------------------------
      00006A                        224 _GPIO_setup:
                                    225 ;	user/main.c: 86: GPIO_Init(GPIOD, ((GPIO_Pin_TypeDef)GPIO_PIN_5), GPIO_MODE_OUT_PP_HIGH_FAST);
      00006A 4B F0            [ 1]  226 	push	#0xf0
      00006C 4B 20            [ 1]  227 	push	#0x20
      00006E 4B 0F            [ 1]  228 	push	#0x0f
      000070 4B 50            [ 1]  229 	push	#0x50
      000072 CDr00r00         [ 4]  230 	call	_GPIO_Init
      000075 5B 04            [ 2]  231 	addw	sp, #4
      000077 81               [ 4]  232 	ret
                                    233 	.area CODE
                                    234 	.area INITIALIZER
                                    235 	.area CABS (ABS)
