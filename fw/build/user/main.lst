                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _TIM4_UPD_OVF_IRQHandler
                                     13 	.globl _delay
                                     14 	.globl _RTC_GetDateTime
                                     15 	.globl _RTC_Init
                                     16 	.globl _screen
                                     17 	.globl _setDigit
                                     18 	.globl _displayInit
                                     19 	.globl _TIMER_CheckTimeMS
                                     20 	.globl _TIMER_InitTime
                                     21 	.globl _TIMER_Inc
                                     22 	.globl _TIMER_Init
                                     23 	.globl _TIM4_ClearITPendingBit
                                     24 	.globl _IWDG_ReloadCounter
                                     25 	.globl _tick
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area DATA
      000000                         30 _tick::
      000000                         31 	.ds 6
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area INITIALIZED
                                     36 ;--------------------------------------------------------
                                     37 ; Stack segment in internal ram 
                                     38 ;--------------------------------------------------------
                                     39 	.area	SSEG
      000000                         40 __start__stack:
      000000                         41 	.ds	1
                                     42 
                                     43 ;--------------------------------------------------------
                                     44 ; absolute external ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area DABS (ABS)
                                     47 ;--------------------------------------------------------
                                     48 ; interrupt vector 
                                     49 ;--------------------------------------------------------
                                     50 	.area HOME
      000000                         51 __interrupt_vect:
      000000 82v00u00u00             52 	int s_GSINIT ;reset
      000004 82 00 00 00             53 	int 0x0000 ;trap
      000008 82 00 00 00             54 	int 0x0000 ;int0
      00000C 82 00 00 00             55 	int 0x0000 ;int1
      000010 82 00 00 00             56 	int 0x0000 ;int2
      000014 82 00 00 00             57 	int 0x0000 ;int3
      000018 82 00 00 00             58 	int 0x0000 ;int4
      00001C 82 00 00 00             59 	int 0x0000 ;int5
      000020 82 00 00 00             60 	int 0x0000 ;int6
      000024 82 00 00 00             61 	int 0x0000 ;int7
      000028 82 00 00 00             62 	int 0x0000 ;int8
      00002C 82 00 00 00             63 	int 0x0000 ;int9
      000030 82 00 00 00             64 	int 0x0000 ;int10
      000034 82 00 00 00             65 	int 0x0000 ;int11
      000038 82 00 00 00             66 	int 0x0000 ;int12
      00003C 82 00 00 00             67 	int 0x0000 ;int13
      000040 82 00 00 00             68 	int 0x0000 ;int14
      000044 82 00 00 00             69 	int 0x0000 ;int15
      000048 82 00 00 00             70 	int 0x0000 ;int16
      00004C 82 00 00 00             71 	int 0x0000 ;int17
      000050 82 00 00 00             72 	int 0x0000 ;int18
      000054 82 00 00 00             73 	int 0x0000 ;int19
      000058 82 00 00 00             74 	int 0x0000 ;int20
      00005C 82 00 00 00             75 	int 0x0000 ;int21
      000060 82 00 00 00             76 	int 0x0000 ;int22
      000064 82v00u00u0C             77 	int _TIM4_UPD_OVF_IRQHandler ;int23
      000068 82 00 00 00             78 	int 0x0000 ;int24
      00006C 82 00 00 00             79 	int 0x0000 ;int25
      000070 82 00 00 00             80 	int 0x0000 ;int26
      000074 82 00 00 00             81 	int 0x0000 ;int27
      000078 82 00 00 00             82 	int 0x0000 ;int28
      00007C 82 00 00 00             83 	int 0x0000 ;int29
                                     84 ;--------------------------------------------------------
                                     85 ; global & static initialisations
                                     86 ;--------------------------------------------------------
                                     87 	.area HOME
                                     88 	.area GSINIT
                                     89 	.area GSFINAL
                                     90 	.area GSINIT
      000000                         91 __sdcc_gs_init_startup:
      000000                         92 __sdcc_init_data:
                                     93 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   94 	ldw x, #l_DATA
      000003 27 07            [ 1]   95 	jreq	00002$
      000005                         96 00001$:
      000005 72 4FuFFuFF      [ 1]   97 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   98 	decw x
      00000A 26 F9            [ 1]   99 	jrne	00001$
      00000C                        100 00002$:
      00000C AEr00r00         [ 2]  101 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]  102 	jreq	00004$
      000011                        103 00003$:
      000011 D6uFFuFF         [ 1]  104 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]  105 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]  106 	decw	x
      000018 26 F7            [ 1]  107 	jrne	00003$
      00001A                        108 00004$:
                                    109 ; stm8_genXINIT() end
                                    110 	.area GSFINAL
      000000 CCr00r80         [ 2]  111 	jp	__sdcc_program_startup
                                    112 ;--------------------------------------------------------
                                    113 ; Home
                                    114 ;--------------------------------------------------------
                                    115 	.area HOME
                                    116 	.area HOME
      000080                        117 __sdcc_program_startup:
      000080 CCr00r1A         [ 2]  118 	jp	_main
                                    119 ;	return from main will return to caller
                                    120 ;--------------------------------------------------------
                                    121 ; code
                                    122 ;--------------------------------------------------------
                                    123 	.area CODE
                                    124 ;	user/main.c: 26: void delay(uint16_t x)
                                    125 ;	-----------------------------------------
                                    126 ;	 function delay
                                    127 ;	-----------------------------------------
      000000                        128 _delay:
      000000 89               [ 2]  129 	pushw	x
                                    130 ;	user/main.c: 28: while(x--);
      000001 1E 05            [ 2]  131 	ldw	x, (0x05, sp)
      000003                        132 00101$:
      000003 1F 01            [ 2]  133 	ldw	(0x01, sp), x
      000005 5A               [ 2]  134 	decw	x
      000006 16 01            [ 2]  135 	ldw	y, (0x01, sp)
      000008 26 F9            [ 1]  136 	jrne	00101$
      00000A 85               [ 2]  137 	popw	x
      00000B 81               [ 4]  138 	ret
                                    139 ;	user/main.c: 31: INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
                                    140 ;	-----------------------------------------
                                    141 ;	 function TIM4_UPD_OVF_IRQHandler
                                    142 ;	-----------------------------------------
      00000C                        143 _TIM4_UPD_OVF_IRQHandler:
      00000C 62               [ 2]  144 	div	x, a
                                    145 ;	user/main.c: 33: TIM4_ClearITPendingBit(TIM4_IT_UPDATE);
      00000D 4B 01            [ 1]  146 	push	#0x01
      00000F CDr00r00         [ 4]  147 	call	_TIM4_ClearITPendingBit
      000012 84               [ 1]  148 	pop	a
                                    149 ;	user/main.c: 34: TIMER_Inc();
      000013 CDr00r00         [ 4]  150 	call	_TIMER_Inc
                                    151 ;	user/main.c: 35: IWDG_ReloadCounter();
      000016 CDr00r00         [ 4]  152 	call	_IWDG_ReloadCounter
      000019 80               [11]  153 	iret
                                    154 ;	user/main.c: 56: void main() 
                                    155 ;	-----------------------------------------
                                    156 ;	 function main
                                    157 ;	-----------------------------------------
      00001A                        158 _main:
      00001A 52 0B            [ 2]  159 	sub	sp, #11
                                    160 ;	user/main.c: 61: RTC_Init();
      00001C CDr00r00         [ 4]  161 	call	_RTC_Init
                                    162 ;	user/main.c: 62: displayInit(GPIOC, GPIOA, GPIO_PIN_6, GPIO_PIN_5, GPIO_PIN_7, GPIO_PIN_4, GPIO_PIN_3, GPIO_PIN_2, GPIO_PIN_1, GPIO_PIN_3);
      00001F 4B 08            [ 1]  163 	push	#0x08
      000021 4B 02            [ 1]  164 	push	#0x02
      000023 4B 04            [ 1]  165 	push	#0x04
      000025 4B 08            [ 1]  166 	push	#0x08
      000027 4B 10            [ 1]  167 	push	#0x10
      000029 4B 80            [ 1]  168 	push	#0x80
      00002B 4B 20            [ 1]  169 	push	#0x20
      00002D 4B 40            [ 1]  170 	push	#0x40
      00002F 4B 00            [ 1]  171 	push	#0x00
      000031 4B 50            [ 1]  172 	push	#0x50
      000033 4B 0A            [ 1]  173 	push	#0x0a
      000035 4B 50            [ 1]  174 	push	#0x50
      000037 CDr00r00         [ 4]  175 	call	_displayInit
      00003A 5B 0C            [ 2]  176 	addw	sp, #12
                                    177 ;	user/main.c: 63: TIMER_Init();
      00003C CDr00r00         [ 4]  178 	call	_TIMER_Init
                                    179 ;	user/main.c: 64: TIMER_InitTime(&tick);
      00003F AEr00r00         [ 2]  180 	ldw	x, #_tick+0
      000042 1F 0A            [ 2]  181 	ldw	(0x0a, sp), x
      000044 1E 0A            [ 2]  182 	ldw	x, (0x0a, sp)
      000046 89               [ 2]  183 	pushw	x
      000047 CDr00r00         [ 4]  184 	call	_TIMER_InitTime
      00004A 85               [ 2]  185 	popw	x
                                    186 ;	user/main.c: 67: enableInterrupts();
      00004B 9A               [ 1]  187 	rim
                                    188 ;	user/main.c: 68: while(TRUE) 
      00004C                        189 00104$:
                                    190 ;	user/main.c: 70: if(TIMER_CheckTimeMS(&tick, 50) == 0)
      00004C 16 0A            [ 2]  191 	ldw	y, (0x0a, sp)
      00004E 4B 32            [ 1]  192 	push	#0x32
      000050 5F               [ 1]  193 	clrw	x
      000051 89               [ 2]  194 	pushw	x
      000052 4B 00            [ 1]  195 	push	#0x00
      000054 90 89            [ 2]  196 	pushw	y
      000056 CDr00r00         [ 4]  197 	call	_TIMER_CheckTimeMS
      000059 5B 06            [ 2]  198 	addw	sp, #6
      00005B 4D               [ 1]  199 	tnz	a
      00005C 26 2A            [ 1]  200 	jrne	00102$
                                    201 ;	user/main.c: 72: RTC_GetDateTime(&time);
      00005E 96               [ 1]  202 	ldw	x, sp
      00005F 5C               [ 2]  203 	incw	x
      000060 1F 08            [ 2]  204 	ldw	(0x08, sp), x
      000062 1E 08            [ 2]  205 	ldw	x, (0x08, sp)
      000064 89               [ 2]  206 	pushw	x
      000065 CDr00r00         [ 4]  207 	call	_RTC_GetDateTime
      000068 85               [ 2]  208 	popw	x
                                    209 ;	user/main.c: 73: setDigit(1, time.sec/10);
      000069 1E 08            [ 2]  210 	ldw	x, (0x08, sp)
      00006B F6               [ 1]  211 	ld	a, (x)
      00006C 5F               [ 1]  212 	clrw	x
      00006D 97               [ 1]  213 	ld	xl, a
      00006E A6 0A            [ 1]  214 	ld	a, #0x0a
      000070 62               [ 2]  215 	div	x, a
      000071 9F               [ 1]  216 	ld	a, xl
      000072 88               [ 1]  217 	push	a
      000073 4B 01            [ 1]  218 	push	#0x01
      000075 CDr00r00         [ 4]  219 	call	_setDigit
      000078 85               [ 2]  220 	popw	x
                                    221 ;	user/main.c: 74: setDigit(2, time.sec%10);
      000079 1E 08            [ 2]  222 	ldw	x, (0x08, sp)
      00007B F6               [ 1]  223 	ld	a, (x)
      00007C 5F               [ 1]  224 	clrw	x
      00007D 97               [ 1]  225 	ld	xl, a
      00007E A6 0A            [ 1]  226 	ld	a, #0x0a
      000080 62               [ 2]  227 	div	x, a
      000081 88               [ 1]  228 	push	a
      000082 4B 02            [ 1]  229 	push	#0x02
      000084 CDr00r00         [ 4]  230 	call	_setDigit
      000087 85               [ 2]  231 	popw	x
      000088                        232 00102$:
                                    233 ;	user/main.c: 76: screen(250);
      000088 4B FA            [ 1]  234 	push	#0xfa
      00008A CDr00r00         [ 4]  235 	call	_screen
      00008D 84               [ 1]  236 	pop	a
      00008E 20 BC            [ 2]  237 	jra	00104$
      000090 5B 0B            [ 2]  238 	addw	sp, #11
      000092 81               [ 4]  239 	ret
                                    240 	.area CODE
                                    241 	.area INITIALIZER
                                    242 	.area CABS (ABS)
